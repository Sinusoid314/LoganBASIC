(March 13, 2022)
[v1.6.35]
	- Modified "Scrolling Platformer" example.

(March 12, 2022)
[v1.6.34]
	- Modified "Scrolling Platformer" example.
[v1.6.33]
	- Modified "Scrolling Platformer" example.

(March 9, 2022)
[v1.6.32]
	- Modified "Scrolling Platformer" example.

(March 8, 2022)
[v1.6.31]
	- Added help page for Scroll Offset description.
	- Added a platform sprite to "Scrolling Platformer" example.

(March 6, 2022)
[v1.6.30]
	- Added Usage sections to help pages for getSpriteScroll() and setSpriteScroll() native functions.

(March 3, 2022)
[v1.6.29]
	- Added help pages for getScrollX(), setScrollX(), getScrollY(), setScrollY(), shiftScrollX(), and shiftScrollY() native functions.
	- Seperated the description of sprite sheets from the loadSpriteSheet() help page.

(February 28, 2022)
[v1.6.28]
	- Added scrolling view to "Scrolling Platformer" example.

(February 26, 2022)
[v1.6.27]
	- Added getScrollX(), setScrollX(), getScrollY(), setScrollY(), shiftScrollX(), shiftScrollY(), getSpriteScroll(),
	  and setSpriteScroll() native functions.
	- Updated "Scrolling Platformer" example.

(February 23, 2022)
[v1.6.26]
	- Updated "Scrolling Platformer" example.
	- Modified the canvas event handler to prevent the browser's default action when an event is handled.

(February 21, 2022)
[v1.6.25]
	- Started "Scrolling Platformer" example.

(February 16, 2022)
[v1.6.24]
	- Added an Updates page.

(February 14, 2022)
	- Finished commenting the example programs.
	- Modified "Breakout" example program.

(February 8, 2022)
	- Fixed bug with drawImageTiled() slowing down when called continuously.

(January 25, 2022)
	- Modified updateSprites() native function to make the deltaTime argument optional.
	- Fix bug with sprites not being hidden when using setSpriteVisible().
	- Finished adding usage sections to the help pages for sprite functions.

(January 21, 2022)
	- Added usage sections to the help pages for setSpriteX(), getSpriteY(), setSpriteY(), getSpriteDrawWidth(),
	  setSpriteDrawWidth(), getSpriteDrawHeight(), and setSpriteDrawHeight() native functions.
	- Added About page.

(January 20, 2022)
	- Added usage sections to the help pages for getSpriteVelocityY(), setSpriteVelocityY(), and getSpriteVelocityX() native functions.
	- Added a frame rate display to "Bouncing Sprites" example.

(January 18, 2022)
	- Added setSpriteSheet() native function.
	- Added usage sections to the help pages for loadSpriteSheet(), unloadSpriteSheet(), drawSprites(), addSprite(),
	  removeSprite(), updateSprites(), getSpriteX(), setSpriteFrameRate(), setSpriteVelocityX(), and setSpriteFrameRange()
	  native functions.

(January 12, 2022)
	- Added a sprite sheet layout image to the loadSpriteSheet help page.

(January 10, 2022)
	- Added descriptions to the help pages for sprite functions.

(January 8, 2022)
	- Added help page for pointInRect(), pointInCircle(), rectsOverlap(), circlesOverlap(), and rectOverlapsCircle() native functions.

(January 6, 2022)
	- Added help page for drawImageTiled()

(January 4, 2022)
	- Implemented drawImageTiled() native function.

(January 1, 2022)
	- Added spritesOverlap(), pointInSprite(), spriteOverlapsRect(), and spriteOverlapsCircle() native functions.
	- Added pointInRect(), pointInCircle(), rectsOverlap(), circlesOverlap(), and rectOverlapsCircle() native functions.

(December 31, 2021)
	- Fixed bug with sprite draw sizes not scaling.

(December 30, 2021)
	- Modified loadSpriteSheet() and spriteSheet_onLoad() in sprite_ui module to use the dataset attribute to store
	  the sprite sheet's row and column count.
	- Modified "Bounding Sprites" example to use sprite native functions.
	
(December 29, 2021)
	- Renamed getSpriteFrameIndex() and setSpriteFrameIndex() to getSpriteFrame() and setSpriteFrame().
	- Added getSpriteFrameCount(), setSpriteFrameRange(), getSpriteCycles(), and setSpriteCycles() native funcitons.
	- Modified funcUpdateSprites() in sprite_funcs module to keep track of sprite frame range and cycles.

(December 25, 2021)
	- Added drawSprites(), getSpriteX(), setSpriteX(), getSpriteY(), setSpriteY(), getSpriteDrawWidth(), setSpriteDrawWidth(),
	  getSpriteDrawHeight(), setSpriteDrawHeight(), getSpriteVelocityX(), setSpriteVelocityX(), getSpriteVelocityY(), setSpriteVelocityY(),
	  getSpriteFrameRate(), setSpriteFrameRate(), getSpriteFrameIndex(), setSpriteFrameIndex(), getSpriteVisible(), setSpriteVisible(),
	  getSpritePlaying(), and setSpritePlaying() native function.

(December 24, 2021)
	- Added addSprite(), removeSprite(), and updateSprites() native functions.

(December 22, 2021)
	- Added loadSpriteSheet(), unloadSpriteSheet(), getSpriteFrameWidth(), and getSpriteFrameHeight() native functions.

(December 20, 2021)
	- Split function help pages into Standard, Canvas, and Sound catagories.
	- Added sprite_funcs and sprite_ui modules.
	- Modified showCanvas() in canvas_ui modules to set focus to the canvas.

(December 19, 2021)
	- Modified canvas_funcs and canvas_ui modules to keep the image objects in a Map on the UI thread.
	- Added a background image and sound effects to "Bouncing Sprites" example.

(December 18, 2021)
	- Modified canvas_onAnimationFrame() in canvas_ui module to use drawImage() to draw the canvas buffer.

(December 17, 2021)
	- Modified sound_funcs and sound_ui modules to keep the audio objects in a Map on the UI thread.

(December 15, 2021)
	- Added setError() and cleanup() methods to Runtime class.
	- Changed raiseError() method to endWithError() in Runtime class.
	- Added endRuntime() method to CallbackContext class.
	- Modified native function handlers in sound_funcs module to wait for response from the UI thread.

(December 12, 2021)
	- Renamed cleanupImages() to cleanupCanvas().
	- Added removal of canvas event handlers in cleanupCanvas().
	- Moved runtime, compiler, scanner, object, bytecode, and token source files into new /core directory.

(December 9, 2021)
	- Renamed the call grammar rules to postfix and merged it with the arrayItem rule.

(December 7, 2021)
	- Added "Bouncing Sprites" to the examples page.

(December 6, 2021)
	- Finished "Breakout" example.
	- Added checkTerminator() and checkTokenList() methods to Compiler class.
	- Modified returnStmt() in Compiler to use checkTerminator() instead of matchTerminator().
	- Modified showCanvas() in console_ui module to set focus on the canvas.

(December 1, 2021)
	- Started "Breakout" example.
	
(November 30, 2021)
	- Added a bar graph to "Letter Count" example.
	- Added "Conway's Game of Life" to the examples page.

(November 27, 2021)
	- Split cleanupCanvas() in canvas_ui into resetCanvas() and cleanupImages().
	- Added cleanupSounds() in sound_ui.
	- Replaced fish.png with ship1.png in help pages.
	- Added "Letter Count" to the examples page.

(November 22, 2021)
	- Modified some of the graphic function help pages to refer to fish.png.

(November 20, 2021)
	- Added clamp() native function.

(November 19, 2021)
	- Added addItem() and removeItem() methods to ObjArray class.
	- Added addArrayItem() and removeArrayItem() native functions.

(November 17, 2021)
	- Added isFilled parameter to drawText() native funciton.
	- Added setTextFont(), setFillColor(), setLineColor(), and setLineSize() native functions.
	- Italicized parameters in the help page descriptions.

(November 16, 2021)
	- Added drawCircle() and drawLine() native functions.

(November 15, 2021)
	- Added optional scaling parameters to drawImage() native function.
	- Added drawImageClip() native function.

(November 14, 2021)
	- Added help page entries for Structure statement and New operator.
	- Added drawRect() native function.
	- Fixed bug with compiling structure definitions.

(November 10, 2021)
	- Fixed bug with images not drawing to the canvas.
	- Added support for data structures.
	- Added support for dynamically created arrays.

(November 1, 2021)
	- Added playSound(), pauseSound(), stopSound(), getSoundLen(), getSoundPos(), setSoundPos(), and loopSound() native functions.
	- Added entries for the sound functions to the help page.

(October 29, 2021)
	- Added loadSound() and unloadSound() native functions, along with sound_funcs and sound_ui modules.

(October 27, 2021)
	- Added showEditor(), hideEditor(), showConsole(), hideConsole(), showCanvas(), and hideCanvas() native functions.
	- Added editor line selection when reporting an error.

(October 26, 2021)
	- Moved onInputResult() from main module to std_funcs module.
	- Moved routing of worker-to-ui canvas messages back to progUI_onMessage() in main_ui module.
	- Modified runFunc() in CallbackContext class to check if userFunc is null.
	- Added inputCallback to store the runtime object that requested console input.
	- Modified loadImage() native function to pause the runtime until the image has either succeeded
	  or failed to load, and return the result as either true or false respectively.
	- Added drawText() native function.
	- Added "pointermove" canvas event.
	- Added getImageWidth() and getImageHeight() native functions.

(October 25, 2021)
	- Modified DrawCanvasBuffer() to take an optional callback function that is called after the buffer has been drawn.
	- Modified runFunc() in CallbackContext class to not run the callback function unless the runtime state is RUNTIME_STATUS_PAUSED.

(October 21, 2021)
	- Fixed bug with keyboard input not working in the canvas.
	- Added entry for setCanvasEvent() to the help page.

(October 20, 2021)
	- Modified runFunc() member in CallbackContext class to take a single array as an argument.
	- Added setCanvasEvent() native function to support user input for the canvas.

(October 19, 2021)
	- Added enableCanvasBuffer(), disableCanvasBuffer(), and drawCanvasBuffer() native functions.
	- Modified setCanvasWidth() and setCanvasHeight() to resize the buffer canvas with the main canvas and retain the graphics of both.
	- Added MoveImage to the examples page.

(October 17, 2021)
	- Combined all canvas messages into MSGID_CANVAS_MSG handled by canvasWorker_onMessage() in canvas_ui module.
	- Added setCanvasWidth() and setCanvasHeight() native functions.

(October 16, 2021)
	- Fixed bug with images being stretched when drawn to the canvas.
	- Added entries for clearCanvas(), loadImage(), unloadImage(), and drawImage() to the help page.
	- Added setCanvasWidth() and setCanvasHeight() functions to canvas_ui module.
	- Modified cleanupCanvas() in canvas_ui module to reset the canvas size.

(October 15, 2021)
	- Added onDoneJsFunc member to Runtime class to provide a callback for when the runtime object is done executing the program.
	- Added canvas_funcs module and renamed native_func module to std_funcs.
	- Added clearCanvas(), loadImage(), unloadImage(), and drawImage() native functions for drawing on the canvas.
	- Added CanvasImage to the examples page.

(October 14, 2021)
	- Added a status member to Runtime class that can be either RUNNING, PAUSED, or DONE.
	- Fixed bug with timer callback not ending program properly.

(October 13, 2021)
	- Added CallbackContext class to facilitate calling user functions from outside of the Runtime class.
	- Added startTimer() and stopTimer() native functions.

(October 12, 2021)
	- Changed console to have a separate textbox for input.

(October 11, 2021)
	- Rearranged the UI into four modules: editor_ui, console_ui, canvas_ui, and main_ui.

(October 7, 2021)
	- Added ability to declare more than one variable per Var statement.
	- Added Wait statement and PAUSE opcode to pause program execution and wait for callback events.
	- Moved the main user function loading from run() to constructor() in Runtime.
	- Added ability to collapse/expand the editor and console.
	- Fix bug with console not collapsing.
	- Added a canvas UI element to the main page.

(October 4, 2021)
	- Added source code line to runtime error messages.

(October 3, 2021)
	- Fixed bug with user functions not compiling.
	- Added raiseError() method to Compiler and Runtime.
	- Fixed a bug with STORE_ARRAY_ITEM_PERSIST not leaving the item value on the stack.

(September 28, 2021)
	- Finished implementing user function support in Runtime.
	- Finished implementing user function support in Compiler.
	- Added a toString() method to ObjUserFunc.
	- Added entries for Return and Function in help docs.

(September 26, 2021)
	- Added makeEOFToken() method to Scanner.
	- Modified forStmt() in Compiler to use LOAD_INT opcode instead of LOAD_LIT.
	- Added opsCount() method to Compiler.
	- Renamed 'inputting' member in Runtime to 'paused'.

(September 14, 2021)
	- Added ObjUserFunc and CallFrame classes.
	- Modified Bytecode, Runtime, and Compiler members to support user functions.
	- Added FUNCTION and RETURN tokens.
	- Modified grammar to support user functions.
	- Added SCOPE_GLOBAL and SCOPE_LOCAL types for distinguishing variable scope.
	- Renamed CALL_NATIVE_FUNC opcode to CALL_FUNC.
	- Added LOAD_INT and LOAD_USER_FUNC opcodes.
	- Modified LOAD_VAR, STORE_VAR, and STORE_VAR_PERSIST, JUMP, JUMP_IF_FALSE, JUMP_IF_FALSE_PERSIST,
	  JUMP_IF_TRUE, JUMP_IF_TRUE_PERSIST, and END opcodes to support user functions.

(September 12, 2021)
	- Replaced nextToken with prevToken in scanTokens() in Compiler.
	- In Runtime, replaced getOperand() and currOpIndex with currOp and nextOpIndex.

(August 21, 2021)
	- Added INCREMENT_COUNTER opcode.
	- Fixed bug with For loops not terminating.

(August 17, 2021)
	- Renamed some member variables to have more succinct names.
	- Added help entries for For...Next, Exit While, Exit For, and Exit Do.
	- Added Exit statements for While, For, and Do loops.
	- Modified parseStatement() in Compiler to report an error when a block-ending token does not match with its corresponding block.

(August 15, 2021)
	- Refactored scanTokens() in Compiler.

(August 13, 2021)
	- Modified getVariableIndex() in Compiler to check a new variable's identifier against the native function names.

(August 5, 2021)
	- Added toString() method to Bytecode class.
	- Fixed bug where native function objects were not being popped off the stack after being called.

(August 4, 2021)
	- Added expression statements, making assignments part of expressions.
	- Added back-to-back parenthesis/brackets for function-calls/array-items.
	- Modified native functions to be first-class values.
	- Added LOAD_NATIVE_FUNC and STORE_VAR_PERSIST opcodes.

(August 3, 2021)
	- Moved nativeFuncList into Bytecode class.
	- Renamed class NativeFunc to ObjNativeFunc.
	- Moved ObjNativeFunc and ObjArray classes to the new Object module.

(August 1, 2021)
	- Modified the syntax grammar to allow:
	  - Expression statements, including assignment.
	  - Back-to-back parenthesis/brackets for function-calls/array-items.
	  - Calling first-class functions.

(July 28, 2021)
	- Fixed bug with Input() native function that was leaving an extra item on the stack.

(July 17, 2021)
	- Added CHECK_COUNTER opcode.
	- Added FOR/NEXT loop.

(July 14, 2021)
	- Added expression operator sections to help file.
	- Fixed bug where the touch-screen keypad does not appear when the console is waiting for input.

(July 10, 2021)
	- Modified the native function implementation to supply a reference to the
	  runtime object that is invoking the function.
	- Added exponent operator ^.
	- Started expression operator section in help file.

(June 29, 2021)
	- Finished statement help pages.
	- Fixed bug that caused the compiler to hang in some cases.
	- Finished commenting all functions and methods.

(June 24, 2021)
	- Finished function help pages.

(June 19, 2021)
	- Finished modifying Scanner to output one token at a time.
	- Fixed bugs in Scanner and Compiler.

(June 18, 2021)
	- Removed the 'loganbasic_' prefix from the source file names.
	- Renamed Parser class to Compiler.
	- Made nativeFuncList a global variable.
	- Modified Compiler to use the Scanner to build its own token list.
	- Started modifying Scanner to output one token at a time.

(June 14, 2021)
	- Set up the outlines for Statements help pages.
	- Modified examples page to load the example code in an iframe.

(June 13, 2021)
	- Set up the main help page.

(June 8, 2021)
	- Started the help pages.

(June 7, 2021)
	- Modified the calling convention of native functions to allow optional arguments.
	- Added Trim(), LTrim(), RTrim(), Mid(), Abs(), Min(), Max(), Sqr(), Asc(),
	  Chr(), Str(), and Val() native functions.

(May 30, 2021)
	- Added DO/LOOP WHILE loop.
	- Added Left() and Right() native functions.

(May 28, 2021)
	- Added Var statement for declaring variables.
	- Added Len() native function that works for both strings and arrays.
	- Added Upper() and Lower() native functions.
	- Added Cls statement for clearing the console.

(May 26, 2021)
	- Added matchToken() in Parser to check and consume a single token.
	- Finished adding array support.
	- Fixed bug in Runtime where arrays items were not being initialized to 0.
	- Changed Input statement into a native function.
	- Added two array examples to examples page.

(May 23, 2021)
	- Added getOperand() to Runtime.
	- Added array support in Runtime.

(May 22, 2021)
	- Started adding support for arrays.

(May 18, 2021)
	- Added HiLo.bas to the examples page.
	- Added version number to the bottom of loganbasic.html.
	- Added the shell for the help page.

(May 16, 2021)
	- Added function-call statement.
	- Added more CSS styling to the UI elements.
	- Added an examples programs page.
	- Fixed a bug when compiling code that has comments or newlines at its beginning.
	- Disabled spellcheck underlines in the editor.

(May 14, 2021)
	- Added ELSE clause to IF..THEN statement.

(May 12, 2021)
	- Made the statement-terminator optional and moved its consumption to parseStatement().

(May 11, 2021)
	- Implemented "Open File" button in editor.
	- Implemented "Save" button in editor.
	- Implemented window_onLoad().

(May 8, 2021)
	- Separated the code editor into loganbasic_editor module.
	- Added a menu bar to the editor.
	- Implemented "New" and "Open URL" buttons in editor.

(May 2, 2021)
	- Added native function Int().
	- Added getNativeFuncIndex() to Parser.
	- Debugged native function support.
	- Modified callExpr() in Parser to make function identifier matching case-insensitive.

(May 1, 2021)
	- Added native functions Rnd() and Time().

(April 30, 2021)
	- Added logical-line-extender '_'.

(April 29, 2021)
	- Modified whileStmt() in Parser to use checkToken() for detecting WEND keyword.

(April 27, 2021)
	- Renamed matchTokenTypes() to matchTokenList().
	- Renamed checkTokenType() to checkToken().
	- Renamed checkNextTokenType() to checkNextToken().
	- Added checkTokenPair() to Parser.
	- Modified ifStmt() in Parser to use checkTokenPair().
	- Added statement terminator ':'.
	- Add END statement.
	- Added WHILE...WEND loop.
	- Made console auto scroll to bottom.
	- Added matchTokenPair() to Parser.
	- Fixed bug with OR operator giving wrong result.
	- Added peekNextToken() and checkNextToken() to Parser.
	- Added IF...THEN...END IF statement.

(April 26, 2021)
	- Added JUMP_IF_TRUE and JUMP_IF_TRUE_PERSIST opcodes.
	- Added OR and AND operators.

(April 25, 2021)
	- Added remainder operator %.
	- Added JUMP, JUMP_IF_FALSE, and JUMP_IF_FALSE_PERSIST opcodes.
	- Changed keyword matching to be case-insensitive.

(April 23, 2021)
	- Added TRUE and FALSE literals.
	- Added NOT operator.
	- Added equality operators.
	- Added comparison operators.

(April 21, 2021)
	- Implemented INPUT statement.
	- Added TOKEN_COMMA.
	- Fixed bug with the negation operator.
	- Modified the PRINT statement to append a newline to its output.
	- Implemented Parser class.
	- Modified main module to use a (Scanner -> Parser -> Runtime) pipeline.

(April 19, 2021)
	- Added Opcode documentation.
	- Implemented Runtime class.

(April 18, 2021)
	- Renamed loganbasic_interpreter module to loganbasic_parser.
	- Renamed Interpreter class to Parser.
	- Added loganbasic_bytecode and loganbasic_runtime modules.
	- Implemented Bytecode class.

(April 17, 2021)
	- Renamed loganbasic_main to loganbasic_ui.
	- Created loganbasic_workermsg module to share message IDs between the UI and worker threads.
	- Moved the Lexer and Interpreter into a worker thread in loganbasic_main.
	
(April 14, 2021)
	- Added error handling for invalid expressions.
	- Renamed checkTerminator() to matchTerminator().

(April 12, 2021)
	- Fixed bug that is returning undefined from evalOperation() in Interpreter class.
	- Added support for parenthesis tokens in Lexer class.
	- Modified scanToken() in Lexer class to avoid adding multiple newline tokens in a row.
	- Added variable support.
	- Added checkTerminator() to Interpreter class.

(April 11, 2021)
	- Added progConsole variable to Lexer class.
	- Implemented runBtn_OnClick().
	- Implemented run(), runStatement(), and printStmt() in Interpreter class.
	- Removed EOF check in checkToken() in Interpreter class.

(April 9, 2021)
	- Implemented evalExpression(), termExpr(), factorExpr(), unaryExpr(),
	  primaryExpr(), and evalOperation() in Interpreter class.

(April 8, 2021)
	- Implemented constructor(), consumeToken(), matchTokenTypes(),
	  checkToken(), endOfTokens(), peekToken(), and prevToken()
	  in Interpreter class.

(April 7, 2021)
	- Implemented scanToken(), consumeStringLiteral(), consumeNumberLiteral(),
	  and consumeIdentifier() in Lexer class.
	- Added error handling to Lexer class.

(April 5, 2021)
	- Added toString() to Token class.
	- Added a status variable and constants to loganbasic_main module.
	- Added a status bar and command bar.
	- Implemented runBtn_OnClick().

(April 4, 2021)
	- Implemented matchChar(), peekChar(), peekNextChar(), and scan()
	  in Lexer class.
	- Added errorMsg to Lexer class.

(April 3, 2021)
	- Implemented constructor(), addToken(), consumeChar(), endOfSource(),
	  isAlpha(), isDigit(), and isAlphaNumeric() in Lexer class.
	- Added keywordList object map to lexer module.

(April 1, 2021)
	- Implemented Token class.
	- Defined language grammar.

(March 31, 2021)
	- Created the HTML, CSS, and JavaScript skeletons.