program  ->  statement* EOF ;

statement  ->  ( varStmt
               | arrayStmt
               | assignment
               | callStmt
               | printStmt
               | ifStmt 
               | whileStmt
               | forStmt
               | endStmt
               | reDimStmt
               | clsStmt
               | doStmt )
               terminator? ;

varStmt     ->  "var" IDENTIFIER ( "=" expression )? ;
arrayStmt   ->  "array" arrayItem ;
assignment  ->  ( IDENTIFIER | arrayItem ) "=" expression ;
callStmt    ->  funcCall ;
printStmt   ->  "print" expression ;
ifStmt      ->  "if" expression "then" 
                ( statement | ( terminator statement* ( "else" terminator statement* )? "end" "if" ) ) ;
whileStmt   ->  "while" expression terminator statement* "wend" ;
forStmt     ->  "for" IDENTIFIER "=" expression "to" expression ( "step" expression )? terminator
                statement* "next" IDENTIFIER? ;
endStmt     ->  "end" ;
reDimStmt   ->  "redim" arrayItem ;
clsStmt     ->  "cls" ;
doStmt      -> "do" terminator statement* "loop" "while" expression ;

expression  ->  logic_or ;
logic_or    ->  logic_and ( "or" logic_and )* ;
logic_and   ->  equality ( "and" equality )* ;
equality    ->  comparison ( ( "=" | "<>" ) comparison )* ;
comparison  ->  term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        ->  factor ( ( "-" | "+" ) factor )* ;
factor      ->  unary ( ( "/" | "*" | "%" ) unary )* ;
unary       ->  ( "-" | "not" ) unary | callExpr ;
callExpr    ->  funcCall | arrayExpr ;
arrayExpr   ->  arrayItem | primary ;
primary     ->  "true" | "false" | NUMBER_LIT | STRING_LIT | IDENTIFIER
                | ( "(" expression ")" ) ;
               
terminator  ->  ( "\n" | ":" | EOF ) ;
funcCall    ->  IDENTIFIER "(" arguments? ")" ;
arrayItem   ->  IDENTIFIER "[" arguments "]" ;
arguments   ->  expression ( "," expression )* ;

NUMBER_LIT  ->  DIGIT+ ( "." DIGIT+ )? ;
STRING_LIT  ->  "\"" <any char except "\"">* "\"" ;
IDENTIFIER  ->  ALPHA ( ALPHA | DIGIT )* ;
ALPHA       ->  "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT       ->  "0" ... "9" ;