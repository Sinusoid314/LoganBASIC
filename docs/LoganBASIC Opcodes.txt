LOAD_TRUE
  stack: [] -> [true]
  Push 'true' onto the stack.

LOAD_FALSE
  stack: [] -> [false]
  Push 'false' onto the stack.

LOAD_INT
  operands: integer
  stack: [] -> [integer]
  Push an integer value onto the stack.

LOAD_NATIVE_FUNC
  operands: functionIndex
  stack: [] -> [functionReference]
  Push a reference to the given native function object onto the stack.

LOAD_USER_FUNC
  operands: functionIndex
  stack: [] -> [functionReference]
  Push a reference to the given user function object onto the stack.

LOAD_LIT
  operands: literalIndex
  stack: [] -> [value]
  Push the value of the given literal onto the stack.

LOAD_VAR
  operands: variableScope, ( localIndex | literalIndex )
  stack: [] -> [value]
  Push the value of the given variable onto the stack.
  If variableScope is SCOPE_GLOBAL, literalIndex is used to reference the
  variable's identifier in the globals tablel; if SCOPE_LOCAL, localIndex
  is used to directly reference the variable in the current call frame.

STORE_VAR
  operands: variableScope, ( localIndex | literalIndex )
  stack: [value] -> []
  Pop value from the stack and store it in the given variable.
  If variableScope is SCOPE_GLOBAL, literalIndex is used to reference the
  variable's identifier in the globals tablel; if SCOPE_LOCAL, localIndex
  is used to directly reference the variable in the current call frame.

STORE_VAR_PERSIST
  operands: variableScope, ( localIndex | literalIndex )
  stack: [value] -> no change
  Store value from top of the stack in the given variable, keeping value on the stack.
  If variableScope is SCOPE_GLOBAL, literalIndex is used to reference the
  variable's identifier in the globals tablel; if SCOPE_LOCAL, localIndex
  is used to directly reference the variable in the current call frame.

POP
  stack: [value] -> []
  Pop value from the stack and discard it.

SUB
  stack: [value1, value2] -> [result]
  Subract value2 from value1.

ADD
  stack: [value1, value2] -> [result]
  Add value1 and value2.

DIV
  stack: [value1, value2] -> [result]
  Divide value1 by value2.

MUL
  stack: [value1, value2] -> [result]
  Multiply value1 and value2.

MOD
  stack: [value1, value2] -> [result]
  Return the remainder of dividing value1 by value2.

NEGATE
  stack: [value] -> [result]
  Switch the sign of value.
  
NOT
  stack: [value] -> [result]
  Return the logical opposite of boolean value.

EQUAL
  stack: [value1, value2] -> [result] 
  Return true if the two values are equal, false otherwise.

GREATER
  stack: [value1, value2] -> [result]
  Return true if value1 is greater than value2, false otherwise.

LESS
  stack: [value1, value2] -> [result]
  Return true if value1 is less than value2, false otherwise.
  
POW
  stack: [value1, value2] -> [result]
  Return value1 raised to the power of value2.

PRINT
  stack: [value] -> []
  Print a value to the console.

JUMP
  operands: opIndex
  Jump to the instruction at opIndex.

JUMP_IF_FALSE
  operands: opIndex
  stack: [value] -> []
  Jump to the instruction at opIndex if value is false.

JUMP_IF_FALSE_PERSIST
  operands: opIndex
  stack: [value] -> no change
  Jump to the instruction at opIndex if value is false, keeping value on the stack.

JUMP_IF_TRUE
  operands: opIndex
  stack: [value] -> []
  Jump to the instruction at opIndex if value is true.

JUMP_IF_TRUE_PERSIST
  operands: opIndex
  stack: [value] -> no change
  Jump to the instruction at opIndex if value is true, keeping value on the stack.
  
END
  Trigger the program to end

CALL_FUNC
  operands: argumentCount
  stack: [functionReference, argument1, argument2, ...] -> [returnValue]
  Call the given function object with the given arguments.

CREATE_ARRAY
  operands: dimCount
  stack: [dimValue1, dimValue2, ...] -> [arrayReference]
  Create an array with the given dimensions.

REDIM_ARRAY
  operands: dimCount
  stack: [arrayReference, dimValue1, dimValue2, ...] -> []
  Set the dimensions of the given array.

LOAD_ARRAY_ITEM
  operands: indexCount
  stack: [arrayReference, indexValue1, indexValue2, ...] -> [itemValue]
  Push the value of the given array item onto the stack.

STORE_ARRAY_ITEM_PERSIST
  operands: indexCount
  stack: [arrayReference, indexValue1, indexValue2, ..., itemValue] -> [itemValue]
  Set the given array item to the given value, keeping value on the stack.

CLS
  Clear the console window.

CHECK_COUNTER
  stack: [endValue, stepValue, counterValue] -> [endValue, stepValue, counterValue, result]
  Return true if stepValue is greater than 0 and counterValue is
  greater than endValue, or stepValue is less than or equal to zero and
  counterValue is less than endValue. Return false otherwise.

INCREMENT_COUNTER
  stack: [stepValue, counterValue] -> [stepValue, newCounterValue]
  Add stepValue to counterValue and replace counterValue with the result.

RETURN
  Return from the currently running user function.

PAUSE
  Pause program execution and exit from the main runtime loop.

CREATE_STRUCT
  operands: structureDefIndex
  stack: [] -> [structureReference]
  Create an instance of the given structure definition.

LOAD_STRUCT_FIELD
  operands: fieldLiteralIndex
  stack: [structureReference] -> [fieldValue]
  Push the value of the given structure field onto the stack.

STORE_STRUCT_FIELD_PERSIST
  operands: fieldLiteralIndex
  stack: [structureReference, fieldValue] -> [fieldValue]
  Set the given structure field to the given value, keeping value on the stack.
